buildscript {
	repositories {
		mavenCentral()
		maven { url 'http://public-maven.classmethod.info/release' }
	}
	dependencies {
		classpath 'jp.classmethod.aws:gradle-aws-plugin:0.14.2'
	}
}

ext {
	artifactId = 'fullbok'
	templateBucket = 'cm-public-cfn-templates'
}

version = "1.9-SNAPSHOT"

apply plugin: 'aws'
aws {
    profileName = project.profileName
    region = project.region
	region 'ap-northeast-1'
}

// ======== release tasks ========

task uploadTemplate(type: jp.classmethod.aws.gradle.s3.AmazonS3FileUploadTask) {
	bucketName project.templateBucket
	key "${project.artifactId}/${project.artifactId}-${version}.template"
	file file("${project.artifactId}.template")
	overwrite project.version.endsWith('-SNAPSHOT')
}

task uploadDemoTemplate(type: jp.classmethod.aws.gradle.s3.AmazonS3FileUploadTask) {
	bucketName project.templateBucket
	key "${project.artifactId}/${project.artifactId}-demo-${version}.template"
	file file("${project.artifactId}-demo.template")
	overwrite project.version.endsWith('-SNAPSHOT')
}

task uploadArchives(dependsOn: [uploadTemplate, uploadDemoTemplate])

// ======== demo tasks ========

apply plugin: 'aws-cloudformation'
cloudFormation {
	stackName "${project.artifactId}-demo"
	templateURL "https://${project.templateBucket}.s3.amazonaws.com/${project.artifactId}/${project.artifactId}-demo-${project.version}.template"
	capabilityIam true
}

awsCfnWaitStackReady.loopTimeout 3600
awsCfnWaitStackComplete.loopTimeout 3600

task cfnInit << {
	assert project.hasProperty('keyName'): "keyName parameter is required"
	assert project.hasProperty('targetCapacity'): "targetCapacity parameter is required"
	assert project.hasProperty('slaveCapacity'): "slaveCapacity parameter is required"
	assert project.hasProperty('masterInstanceAMI'): "masterInstanceAMI parameter is required"
	cloudFormation.stackParams([
		KeyName: project.keyName,
		TargetCapacity: project.targetCapacity,
		SlaveCapacity: project.slaveCapacity,
		MasterInstanceAMI: project.masterInstanceAMI
	])
}

awsCfnMigrateStackAndWaitCompleted.mustRunAfter cfnInit
task deployDemo(dependsOn: [cfnInit, awsCfnMigrateStackAndWaitCompleted]) << {
	def stack = cloudFormation.getStack(project.cloudFormation.stackName)
	stack.outputs.each { println "${it.outputKey} = ${it.outputValue}" }
}

task undeployDemo(dependsOn: [cfnInit, awsCfnDeleteStackAndWaitCompleted])
